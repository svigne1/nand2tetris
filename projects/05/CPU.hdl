// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* 
      -> A-register gets set in this following truth table way
        - where 15th bit, is instruction[15], which is an A-instruction if 0 or C-instruction if 1.
        - If C-instruction, then A is modified using ALU's output only when d1 bit is ON, which is instruction[5]
        - If A-instruction, then A is modified with the reminder of the instruction[0..14]

      15th bit | 5th bit | set | value

        1           1       1       comp
        1           0       0       anything, say instruction
        0           0       1       instruction
        0           1       1       instruction

      -> Re-arrange the table, you get
      15th bit | 5th bit | set | value 
        
        0           0       1       instruction
        0           1       1       instruction
        1           0       0       anything, say instruction
        1           1       1       comp
        
        So, value = instruction if NAND(15th, 5th bit) is 1 otherwise it is comp.
        So, compute the value and run a Mux over it.

      -> Make 5th bit as NOT(5th bit), you get
      15th bit | !5th bit | set | value
        
        0           0       1       instruction
        0           1       1       instruction
        1           0       1       comp
        1           1       0       anything, say instruction
        
        So, set = NAND(15th, !5th), this is the load bit for the A Register.

        Cyclic wiring - 
        A-register's T+1 output (Atplus) is set to computation or instruction or remains the same where computation is computed from an ALU using A-register's output at Time T (At)
    */
    
    Nand(a=instruction[15], b=instruction[5], out=setAvalueBool);
    Not(in=instruction[5], out=not5thBit);
    Nand(a=instruction[15], b=not5thBit, out=setA);

    Mux16(a=computation, b=instruction, sel=setAvalueBool, out=Avalue);
    ARegister(in=Avalue, load=setA, out=Atplus, out=At);


    /* 
        For D-register,
        instruction[15] (C-instruction) == 1 AND instruction[4] (D2 bit in C-instruction) == 1 
    */
    And(a=instruction[15], b=instruction[4], out=setD);
    DRegister(in=computation, load=setD, out=Dtplus, out=Dt);

    /* 
        For ALU(x,y)
        x is D,
        y is A if instruction[12] = 0 
            and M if instruction[12] = 1,
        Control bits are instruction[11..6],
        out = computation
    */
    Mux16(a=At, b=inM, sel=instruction[12], out=AorMasY);
    ALU(x=Dt, y=AorMasY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=computation, zr=zr, ng=ng);

    /* 
        For M, 
        writeM = instruction[15] (C-instruction) == 1  AND instruction[3] (D3 bit in C-instruction) == 1 
        outM = computation
        addressM = At (The value of A, before modified)
    */
    And(a=instruction[3], b=instruction[15], out=writeM);
    Or16(a=computation, b=false, out=outM);
    Or16(a=At, b=false, out[0..14]=addressM);
    
    /* 
        For PC,
        Say instruction = ins
        ins[0..2]
            {
                if ins[0] (greater) == 1 AND pos == 1 AND !zr (not_zero) == 1, then PC=A,
                or if ins[1] (equal) == 1 AND zr == 1, then PC=A
                or if ins[2] (lesser) == 1 AND ng == 1, then PC=A
                or if ins[0] & ins[1] & ins[2] (unconditional) == 1, then PC=A
            } AND ins[15] (C-instruction) == 1  
        If !A, then 
            jump to PC+1,
        If Reset, reset.
        Code needs to be read in reverse
    */
    
    Not(in=ng, out=pos);
    Not(in=zr, out=notZero);
    And(a=instruction[0], b=pos, out=greater1); // if >
    And(a=greater1, b=notZero, out=greater);
    And(a=instruction[1], b=zr, out=equal);
    And(a=instruction[2], b=ng, out=lesser);
    And(a=instruction[0], b=instruction[1], out=unconditional1);
    And(a=instruction[2], b=unconditional1, out=unconditional);
    Or(a=greater, b=equal, out=bigOR1);
    Or(a=bigOR1, b=lesser, out=bigOR2);
    Or(a=bigOR2, b=unconditional, out=bigOR3);
    And(a=instruction[15], b=bigOR3, out=PCjump2A);
    Not(in=PCjump2A, out=PCinc);

    PC(in=At, load=PCjump2A, inc=PCinc, reset=reset, out[0..14]=pc);

}