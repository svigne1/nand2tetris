// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Computer.hdl

/**
 * The HACK computer, including CPU, ROM and RAM.
 * When reset is 0, the program stored in the computer's ROM executes.
 * When reset is 1, the execution of the program restarts. 
 * Thus, to start a program's execution, reset must be pushed "up" (1)
 * and "down" (0). From this point onward the user is at the mercy of 
 * the software. In particular, depending on the program's code, the 
 * screen may show some output and the user may be able to interact 
 * with the computer via the keyboard.
 */

CHIP Computer {

    IN reset;

    PARTS:

    CPU(inM=inM, instruction=instruction, reset=reset, outM=outM, writeM=writeM, addressM=addressM, pc=nextPC);
    Memory(in=outM, load=writeM, address=addressM, out=inM);

    Mux16(a[0..14]=nextPC, b=false, sel=reset, out[0..14]=PC);
    ROM32K(address=PC, out=instruction);

    /* 
        Make a C-isntruction that does nothing when reset is ON.
        - 1(C), 11(Waste), 1(A), 10(x=0), 10(y=0), 10(f=0), 000(set nothing), 000 (dont jump)
        - 1111101010000000 = -1408

        But i cant set a constant right??
        What about the constants i can make? 
        - all zeroes - i cant use, A will change
        - all ones - i cant use, A,D,M and PC will change
        So, 1000000000000000 can be used.
        It is a C-instruction that does nothing
        It performs a random ALU operation, setting nothing, jumping nowhere

        And it can set be in an easy way..., using sub-buses and true or false.

        ^^^ THIS IS NOT REQUIRED ANYMORE... THE RESET BIT IN CPU DIDN'T STOP 
        INSTRUCTION EXECUTION WHEN IT WAS SET.
        THIS IGNORANCE LET TO THE FAILURE OF COMPUTER.HDL TESTS.
        THIS WORK-AROUND SOLVED THE PROBLEM FROM THE COMPUTER SIDE.. 
        -> BUT A FIX HAS BEEN INTRODUCED TO CPU.HDL NOW.. SO THIS WORK-AROUND IS NOT REQUIRED ANYMORE.
    */
    
    // Or16(a[0..14]=false, a[15]=true, b=false, out=standBy);
    // Mux16(a=instruction, b=standBy, sel=reset, out=runOrStop);
}
