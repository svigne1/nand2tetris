// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class SnakeGame {
   
   field Snake snake; 
   field SnakeCell food; 
   field int direction;

   field int size, spacing; 

   /** Constructs a new SnakeGame. */
   constructor SnakeGame new() {
      // Creates a length 3 snake with cell size 15 & snake position (30, 30)
      let snake = Snake.new(32, 32);
      do LCGRandom.setSeed(46);
      let food = newFood();
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do snake.dispose();
      do Memory.deAlloc(this);
      return;
   }
   
   method SnakeCell newFood(){
      var int x;
      var int y;
      // The new position shud be a multiple of 16
      // This is to insure snake and food co-incide properly
      // Instead of clashing near the edges.
      let x = LCGRandom.randRange(0, 31) * 16;
      let y = LCGRandom.randRange(0, 15) * 16;
      return SnakeCell.new(x, y, null);
   }

   /** Runs the game: handles the user's inputs and moves the snake accordingly */
   method void run() {
      
      var char key; // keyboard value
      var boolean exit, outOfBounds;
      var int count;
      var SnakeCell temp;

      let exit = false;
      let outOfBounds = false;
      let direction = -2; // default is right.
      
      // Time it takes for user's first input is the seed.
      // Since this time is random each time.
      do LCGRandom.setSeed(3);

      while (~exit) {
         let key = Keyboard.keyPressed();   
         
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = -1; }   // down arrow
         if (key = 132) { let direction = 2; }   // right arrow
         if (key = 130) { let direction = -2; }   // left arrow
         if (key = 49) { // 1
            let temp = snake.getHead();
            do Output.printInt(temp.getX()); 
         } 
         if (key = 50) { // 2
            let temp = snake.getHead();
            do Output.printInt(temp.getY()); 
         } 
         
         do snake.move(direction);
         
         if(snake.touchedFood(food)){
            do snake.eatFood(food);
            let food = newFood();
         }

         if(snake.eatSelf()){
            let temp = snake.getHead();
            let count = 0;
            while(true){
               do snake.toggle();
               do Sys.wait(100);
               let count = count + 1;
               if(count = 10){
                  return;
               }
            }           
            return;
         }
         
         do food.toggle();
         do Sys.wait(200);
     }
     return;
   }
}



// blink 5 times and quit.




