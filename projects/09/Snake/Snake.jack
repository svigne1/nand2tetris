// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/snake/snake.jack

/** 
   Snake is simply a linked list of SnakeCells.
   Now for graphics optimization, 
*/
class Snake {

   field SnakeCell head, tail; 
   field int currentDirection;

   /** Creates the default snake of length 3 with cell size & location variable. */
   constructor Snake new(int x, int y) {

      var SnakeCell body;

      let head = SnakeCell.new(x, y, null, false);
      let body = SnakeCell.new(x, y, head, false);
      let tail = SnakeCell.new(x, y, body, false);
      let currentDirection = 2;

      do head.moveNextPosition(2);
      do head.moveNextPosition(2);
      do body.moveNextPosition(2);

      // Since all cells are off by default, this will draw the snake.
      do toggle();

      return this;
   }

   /** Disposes this snake. */
   method void dispose() {
      do tail.dispose();
      do Memory.deAlloc(this);
      return;
   }

   // Ignore snake reversal directions.
   method void updateDirection(int direction){
      var int isReverse;
      let isReverse = direction + currentDirection;
      if(~(isReverse = 0)){
         let currentDirection = direction;
      } 
      return;
   }
   // We animate the snake movement by removing the tail
   // & adding it to the head of the snake in the correct direction.
   // This way, every frame, we only re-draw 2 pixels and not the whole snake.
   method void move(int direction){

      var SnakeCell new_head;
      
      // Snake can't go in reverse direction, only forward, left or right.
      do updateDirection(direction);

      let new_head = tail;

      // Tail shrinks
      do tail.toggle();
      let tail = tail.getNext();
      do new_head.setNext(null);

      // Tail moved in front of head
      do new_head.setX(head.getX());
      do new_head.setY(head.getY());
      do new_head.moveNextPosition(currentDirection);
      
      // Head extended.
      do head.setNext(new_head);
      let head = new_head;
      
      do head.toggle();
      
      return;
      
   }  

   method boolean touchedFood(SnakeCell food){
      return head.sameAs(food);
   }

   method void eatFood(SnakeCell food){
      // Eat food
      do head.setNext(food);
      let head = food;
      do head.moveNextPosition(currentDirection);
      do head.setVisible(true);
      do head.draw();
      
      return;
      
   }  

   method boolean eatSelf(){
      
      var SnakeCell current; 
      let current = tail;  
      while (~(current = head)) {
         if(current.sameAs(head)){
            return true;
         }
         let current = current.getNext();
      }

      return false;
   }
   
   method boolean hitWall(){
      var int x, y;
      let x = head.getX();
      let y = head.getY();

      if ((x > 0) & (y>0) & (x < 497) & (y < 241)){
         return false;
      }
      
      return true;
   }

   /** Draws the snake on the screen. */
   method void toggle() { 
      var SnakeCell current;    
      let current = tail;  
      while (~(current = null)) {

         do current.toggle();
         let current = current.getNext();
      }
      return;
   }

   method SnakeCell getHead(){
      return head;
   }
}
