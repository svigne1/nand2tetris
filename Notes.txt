Boolean Gates

    For X, Y

    AND - both 1, result 1
    OR - Any 1, result 1
    NOT - Reverse of Input
    NAND - Not of AND

    DeMorgan Law #### JUST WORKS ####

        NOT(x) OR NOT(y) = NOT ( x AND y)
        NOT(x) AND NOT(y) = NOT ( x OR y)

    -> Every boolean function can be formed only using AND, OR & NOT.. Just write a formula that's true only for 1 row in a truth table & false for every other... then OR such formulas for each row together to get a single formula for the whole table
    -> Every boolean function can be formed using AND & NOT... OR can be written in the form of AND & NOT using DeMorgan formula ... which is 
        NOT(x) OR NOT(y) = NOT(x AND y) .... So,
        x OR y = NOT(NOT(x) AND NOT(y))
        Hence Proved.
    -> Every boolean function can be formed using NAND
        NAND(x,x) = NOT (x AND x) = NOT(x)
        NAND(NAND(x,y), NAND(x,y)) = NOT(NAND(x,y)) = AND (x,y)
        NAND(NAND(x,x), NAND(y,y)) = NAND(NOT(x), NOT(y)) = NOT(NOT(x) AND NOT(y)) = OR(x,y) {DeMorgan Law}
        Hence Proved.

Special Gates

    Mux - 1 Output, Many inputs model. Selector bits selects one input to forward it to the output
    DMux - 1 Input, Many outputs model. Selector bits selects which output input should be forwarded to. All other outputs get an output of 0.

Binary Numbers

    Counting is done only using 2 symbols - 0,1
    Key is ... These symbols can be used to count ANYTHING, ANY concept.
    As a result, when we run out of symbols to count things, we create groups of things and we count those groups ! When we run out of symbols to count groups likewise, we create groups of groups and count that !! The key is these symbols can be used to count any abstract entity !! There is no preference in the choice of entity !!
    And, these countings of different entities is denoted by the place of the digit in a given number.
    So, 347 means 7 counts things. 4 counts 10s of things. 3 counts 10s of 10 things and so on...

    So, a binary number "abcdefg" can be converted to decimal by
        g*2^0 + f*2^1 + e*2^2 .... etc

Binary Addition

    Half-Adder - Sum of two bits... 1 + 1 makes 2 of some things, which is running out of symbols..So, make a group and count it as 1. So, 1 + 1 = 10 !!
    Full-Adder - Sum of three bits... 1 + 1 + 1 = 3, runs out of symbols. Create groups. One group possible, and 1 thing remains. So, 1 + 1 + 1 = 11 !!
    Addition - If a number is represented only by 4 bits. Then the 5th bit carry is THROWN AWAY (OverFlow)


Negative Numbers

    - Initially they used last bit to indicate whether it is a negative or positive number.
    But this created both a (positive zero) +0 and a (negative zero) -0
    - So, they created the 2's complement 

    2's Complement is, -x is represented as 16 - x 

        Binary      Decimal     Decimal in 2's complement

        0000           0                0    
        0001           1                1
        0010           2                2
        0011           3                3
        0100           4                4    
        0101           5                5
        0110           6                6
        0111           7                7
        1000           8                -8 CONFUSION, (8 or -8) ???, like (+0 and -0)
        1001           9                -7
        1010           10               -6
        1011           11               -5
        1100           12               -4
        1101           13               -3
        1110           14               -2
        1111           15               -1
    10000 = 16, the choice for 2's complement  

   The reason for choosing 16,
        1. If we choose a number like 19, then -2 will be calculated as 19 - 2, 17, which ALSO can not be represented by the 4 bits.
        2. 16 is the first number that can not be represented by 4 bits. So, any number u subtract from 16, will definitely find a place among the 4 bits.
        3. This 16 we have added to all negative numbers to represent them as positive numbers is MOST LIKELY to get eliminated during addition's overflow mechanism !! The times it doesn't get eliminated, the answers themselves turn out to be a negative number !!! And the arithmetics #### JUST WORKS ####
    
    Elimination of 16, during addition (to remove the unwanted 16 we introduced to negative numbers) happens automatically due to addition's overflow flaw. The times that this does not happen are times the results themselves are a negative number, So, the 16 we added is conveniently left around untouched. The math #### JUST WORKS #### automatically in all cases.

    Case 1 - Addition of -ve numbers
        Case 1.1
            7 - 4 = 7 + (16 - 4) = 7 + 12 = 19 (flaw) = 3 
            So, the 16 we added forcefully to negative numbers, we lost it automatically through addition's flaw.
        Case 1.2 
            3 - 7 = 3 + (16 - 7) = 3 + 9 = 12 (-4)
            Here, the 16 we added forcefully, never gets removed and that's exactly what we WANT.
            The answer is a negative number
        Case 1.3
            -3 - 4 = (16 - 3) + (16 - 4) = 13 + 12 = 25 (flaw) = 9 (-7)
            Here, we added two 16s forcefully, only one got removed, one stayed and that's because result is a negative number !

    OVERFLOW Problems during arithmetics of boolean numbers - 

        1. 5 + 5 = 10 (-6) .. Addition of positive numbers overflows into negative numbers.
        3. -5 -5 = (16 - 5) + (16 - 5) = 11 + 11 = 22 (flaw) = 6 ... Addition of negative numbers overflows into positive numbers.

        But everywhere else, it #### JUST WORKS ####

    How we do the 2's complement? (I took Madhu's help)
        x is taken as 16 - x 
        16 - x = (15 - x) + 1 = !x + 1

    How is (15 - x) equals to !x? 
        When u subtract any number, x from 1111, the result is the 4-bit NOT of that number
          1111
        - 0101
        = 1010

ALU

    This system has a list of functions that it carries out on the inputs a, b
    But the function to be performed needs to be selected using selector bits
    Basically, ALU is a MUX of functions

    And in order to understand how ALU functions work, You need to remember ONLY one basic rule of boolean arithmetic,
    which is, (15 - x) equals !X

    Selector bits
    
    zx -> x = 0000 if 1
    nx -> x = !x if 1
    zy -> y = 0000 if 1
    ny -> y = !y if 1
    f -> x+y (arithmetic addition) if 1, x&y (bit-wise AND) if 0 
    no -> !f if 1, f if 0

    Output bits

    zr -> if out is 0, then 1
    ng -> if out is negative, then 1

    Selector bit Functionality derived !!! (I took Madhu's help)
    
    zx  nx  zy  ny  f   no  out     Explained     
    1   0   1   0   1   0   0     x=0000, y=0000, f=0000 (+), no=0000, out=0 
    1   1   1   1   1   1   1     x=1111, y=1111, f=1110 (+), no=0001, out=1 
    1   1   1   0   1   0   -1    x=1111, y=0000, f=1111 (+), no=1111, out=-1 (1111 is -1 in 2's complement)
    0   0   1   1   0   0   x     x=x, y=1111, f=x (&), no=x, out=x
    1   1   0   0   0   0   y     x=1111, y=y, f=y (&), no=y, out=y
    0   0   1   1   0   1   !x    x=x, y=1111, f=x (&), no=!x, out=!x
    1   1   0   0   0   1   !y    x=1111, y=y, f=y (&), no=!y, out=!y
    0   0   1   1   1   1   -x    x=x, y=1111, f=15+x (+), no=!(15+x), out = !(16+x-1) = !(x-1) = 15-x+1 = 16-x = -x 
    1   1   0   0   1   1   -y    x=1111, y=y, f=15+y (+), no=!(15+y), out = !(16+y-1) = !(y-1) = 15-y+1 = 16-y = -y
    0   1   1   1   1   1   x+1   x=!x, y=1111, f=15+!x (+), no=!(15+!x), out = !(15+15-x) = 15-15-15+x = -16+x+1 = x+1 
    1   1   0   1   1   1   y+1   x=1111, y=!y, f=15+!y (+), no=!(15+!y), out = !(15+15-y) = 15-15-15+y = -16+y+1 = y+1
    0   0   1   1   1   0   x-1   x=x, y=1111, f=15+x (+), no=15+x, out = (16+x-1) = x-1 
    1   1   0   0   1   0   y-1   x=1111, y=y, f=15+y (+), no=15+y, out = (16+y-1) = y-1
    0   0   0   0   1   0   x+y   x=x, y=y, f=x+y (+), no=x+y, out=x+y
    0   1   0   0   1   1   x-y   x=!x, y=y, f=y+!x (+), no=!(y+!x), out = !(y+15-x) = 15-y-15+x = x-y
    0   0   0   1   1   1   y-x   x=x, y=!y, f=x+!y (+), no=!(x+!y), out = !(x+15-y) = 15-x-15+y = y-x
    0   0   0   0   0   0   x&y   x=x, y=y, f=x&y (&), no=x&y, out=x&y
    0   1   0   1   0   1   x|y   x=!x, y=!y, f=!x AND !y (&), no=NOT(!x AND !y), out= x OR y (DeMorgan Law)

    2 Important Principles to derive all functionalities of ALU

        1. 16 is 10000, 5 bits. So, it can NOT be represented in the 4 bits world. So, practically 16 is the new 0. 
            16 will always get removed or ignored.
        2. 15 - x = 1111 - x = !x. Basically, if you do the math and see, since 15 has all 1s possible (for 4 bits).
            There wont be ANY borrow necessary ever. So, if x has any 1s, it will become 0. And if x has zeros, 15's 1s will descend replacing those zeroes. So, subtracting x from 15, is a neat way to do NOT !!

Sequential chips

    So, far we have dealt with combinatorial chips.
    From a hardware persepective, combinatorial chips are chips that process outputs in a negligible amount of time.
    While sequential chips are chips that take time to stabilize themselves before returning a output.

    This is the reason why .. we introduce CLOCK CYCLES.

    Clock cycle is the minimum amount of time to wait before expecting a sequential chip to output.
    As, a result, sequential chips process input with a time delay of 1 clock cycle.

    Therefore, the only difference is, combinatorial chips process input in the same clock cycle while sequential chips process & output only in the next clock cycle.
    
    Sequential Chips - input at time T, output at time T+1
    Combinatorial Chips - input at time T, output at time T

    D-FlipFlop

        Is a chip that takes input at time T and outputs the input at time T+1
    
Memory

    1-Bit Chip 
    
        - Is the smallest unit of memory
        - You can read & write values to it
        - A load bit is used to signal a Mux inside it, whether we are writing or reading from it. 
        - If it's write, the Mux, takes the incoming input and forwards it to the D-FlipFlop inside.
        - If it's read, the Mux, takes the ouput of the D-FlipFlop and pipes it back to the D-FlipFlop itself.
        
        This looping mechanism, of wiring the ouput of the D-FlipFlop as its own input helps the 1-bit chip to store values eternally.
        
    Register (16-bit, 32-bit, 64-bit Multi-Chip)
        
        It's a bus of 1-bit chips.
    
    RAM (RAM8, RAM64, RAM512, RAM4K, RAM16K)

        - Is a MUX over a Bus of many Registers or other RAMs.
        - Only one register can be accessed at any time. RAM is a MUX of Registers & other RAMs, so only 1 output.
        - Access time to any register is the SAME, Irrespective of RAM's size and register's location.
        - Volatile - loses memory if it loses power.
        - Width is Register Width - How many 1-bit chips each register is made of, Our case 16-bits
        - Address is RAM's selector bits. It depends on how many registers or RAMs, the RAM has packed in it.

    Program Counter

        A special register of 16, 1-Bit chips, to store the address of the program we are executing.
        It's a counter that can be reset to 0, loaded a new value, incremented by 1, or remain the same.
        Since, there is a if-else in its definition, u need to write the truth table down, find the logic Gates
        that wud help u construct the selector bits for Mux, which can then be easily used to select 1 output among 4
        different outputs
    
        
PROJECT3 - COPY 
        I didnt know how to read out[t] & set out[t+1] from these sequential chips in HDL.
        I didnt kno the right syntax to use for that. Turns out DFF's out needs to be mentioned twice. 
        The auto-complete plugin i was using never mentioned that.
        Cheat-Sheet & AppendixA couldn't help.
        Checked online.
        And while programming PC, found out in the CHEAT-SHEET, under the section of "Multiple outputs" (A non-obvious name to index by), the last paragraph mentions in one single line, sequential chips's previous timestamp outputs can be retrieved using the same out keyword.


Hack Assembly Language

    The story is High-Level Language gets compiled into Assembly language by the compiler.
    And assembly language gets converted into binary numbers by the assembler.

    If memory units are huge, their access times are longer. Although, RAM offers same time to access any register in it. If RAMs are bigger, then their access times for each registers get longer.
    As a result the memory is broken into many chunks - Registers, Caches, RAMs & Disks (from smallest to largest)

    A few handful of Registers is kept r3eadily accessible by the CPU.
    Then, a group of registers, called Cache is made available for the CPU.
    Then, a huge memory RAM is available followed by a MASSIVE memory unit Disk ready for use by the CPU.

    In our HACK computer. The registers are A, D & M. All are 16-bit registers.
    D is a data register, it can store only data.
    A is a data register as well as a address register (basically a pointer). It can store data as well as memory addresses of the RAM.
    M is access register. It accesses the address pointed by A.
    So, A is p (a pointer) and M is *p (the value stored in the address pointed by the pointer)

    Example - 
        @23 (sets A=23)
        M = 4 (sets RAM[A] = 4, So, RAM[23] = 4)
        D = M (D is just a temporary register u can use, to hold data)

    There are 2 types of instructions - A-instruction & C-instruction.
    A-instruction 
        is @n, where n is the nth register in the RAM
    C-instruction
        dest = comp; jump
        - dest can be null(empty), A, M, D, AM, MD, AD, AMD
        - comp can be... all the functions in the ALU, there is a table in remember called C-instruction CHEAT-SHEET
        - jump can be null(empty), JEQ (=), JGT (>), JGE (>=), JLT (<), JLE (<=), JNE (!=), JMP (unconditional jump)
    
    Symbolics
        - You can name instructions in a program with a label and then jump to those instructions using that name
            (LABEL)
            @LABEL 
            0; JMP
        - You can name addresses in the RAM with a label and use it as a variable to read and write data into it. Any free address > 15 is assigned to that label.
            @VARIABLE
            D=M     // Reads data
            M=0     // Writes data
        - First 15 registers in the RAM have a name - R0, R1, R2..... R15 and they can be used as @R0... etc. And the rest of the registers can be set any arbitrary name.
        - All operations are limited to the ALU table. All control bits of the ALU, have a label for convenience. You can use any of the mnemonics directly instead of remembering the control bits for each operation.
        
    Screen Memory map
    
        Screen size we have taken in this course is 256x512.
        This is a black and white screen. So, each pixel is either a 0 or 1. 
        So, we require only 1 bit to represent each pixel.

        16 bits make 1 register and there are 512/16 = 32 registers required for representing each row.

        One 16-bit register is called a word. 32 words make up one row.
        And 256x32 = 8192 words make up one screen... basically 8,000 which is nothing but =>  RAM8K

        Therefore, a screen is represented.. by a dedicated RAM8K chip after our RAM16K main RAM chip

        Register number to manipulate row, col pixel is,
            row*32 + col/16
        And bit to manipulate in the register is,
            col%16
        
        Since, Screen (RAM8K) is placed after RAM16K, address of 1st register in screen is,
            16384, which can be accessed using the mnemonic @SCREEN

        This way, an entire 2-dimensional screen .. is converted into one 1-dimensional RAM unit.

    Keyboard Memory map
        This is just a simple 16-bit register. There is a cheat-sheet in remember folder of screenshots.
        Where there is a mapping from every keyboard key to 16-bit binary number.
        @KBD is a mnemonic that's a shortcut to refer to the 24576th register in the RAM.
    
    Placement
        RAM16K (RAM) + RAM8K (Screen) + 1 Register (Keyboard) = Complete RAM
        which is why 16 thousand something is the memory address of screen 
        And 24 thousand something is the memory address of the keyboard.
        They are simply aligned one after the other, where one starts where the other ends.


    Hack programs need to be ended with a infinite loop. Otherwise Hackers can exploit the loophole of the computer to keep infinitely reading all sections of the ROM


Computer

    It is made of CPU + Memory (RAM & ROM)
    The C-instruction needs to be understood in great detail

    C-instruction

        15th bit - A or C-instruction
        14th & 13th - are always 11, these bits are ignored.
        12th bit - Selects A or M as y for operation in ALU with D as x.
        11th to 6th bit - Control bits for the ALU... zx,nx,zy,ny,f,no
        5th, 4th, 3rd - are respectively for A, D & M. If the bit is ON, the register's takes the value of ALU.
        2nd, 1st, 0th bits - are for <,=,>. If all 1, jump unconditionally. If all 0, don't jump.
    
    - Based on the instruction, the registers' values are updated. (A,D,PC,M)
    - M is RAM[A]. And instruction is ROM[PC].

Project5 (Longest Project so FAR....)
    - Didn't watch the video, where they explain the entire architecture. Completed the project without watching since i wanted to figure it out myself
    - Most complicated work so far. So many loops. Course is spoon-feeding students.
    - If not for the clean segregation between CPU & memory and the neat interfaces. It would have been very difficult to understand whats going on.
    - Most complicated part is, multiple loops.
    - I have drawn an entire picture for CPU architecture (comitted in Git)

    LOOPS

    - A, D & M are input to ALU
    - ALU is input to A, D & M

    - PC is input to A, D, M & ALU
    - ALU is input to PC

    
    CPU.hdl
        
        - Forgot to check whether given instruction is C or not before setting D & M registers.
        So, even A-instructions were considered as C instructions !!! Took a long time to debug it.
        Sat and stack-traced a binary program of 20 lines to solve the problem.

    Memory.hdl
        
        Memory_using_ALU:- 
            Started using ALU to subtract constants from the given address to understand what range the given 
        address falls under. For example, 
            1. (0 to 16,383) is RAM
            2. (16,384 to 20479) is Screen1
            2. (20480 to 24575) is Screen2
            4. 24576 is Keyboard
        So, i had 3 ALU operations... subtracted the constants 16384, 20480 & 24576 from the address to find 
        out which range the given address belongs to and passed the address only to that segment.
        Sadly, constants are not allowed in HDL.
        Checked answers online. They had finished it with simple logic gates.

        Memory_using_RAM4K:-
            Started again, this time, i followed the bits carefully.. and found out a way to route the 
        address only using logic gates. Half-way down the automatic testing, i was asked to press the
        letter K and check the output on the screen.
        Sadly.. my hardware emulator had NO keyboard button, or a screen output.
        Frustrated, i posted the question online in their coursera discussion forum...
        But since, they work in US hours, i had a lot of time to kill.. And as usual, there was always hosted answer
        that i can check, so i checked. Turns out... there are in-built chips like Keyboard & Screen that i need to
        use. I cant take on my own, 2 RAM4Ks and 1 register and expect the simulator to understand these RAMs &
        registers are intended to be used as screen & keyboard. So, had to re-do it again.

        Memory:- 
            Finally, i coded it. 90% documentation and 10% coding.

    Computer

        - Very HARD bug... Again, had to stack-trace binary to understand it.
        Problem was very hard to notice... what was happening was, when reset button was pressed.
        2 things were happening together. The PC was getting set to 0. And the 0th instruction was 
        getting executed by the CPU. This should not happen.. as per the specification, only if reset 
        button is set to 1, program should start executing. If reset is 0. Program should stop & be 
        reset to 0. This took 1 whole evening for me to figure out... At first glance, i didnt notice
        the reset button being set. And i had doubts on the CPU that i wrote, so i had to recheck it as well.
        Then, finally it clicked. Somehow !! And DONE.
        - This hack... should not be handled at Computer level.. Actually i forgot, the reset bit in CPU.
        This reset bit was not coded properly in the CPU. As a result, whenever the reset bit was ON, the 
        execution of the instruction never stopped. This error i made in CPU, was not caught by the tests 
        they wrote !!! And it leaked into the Computer tests.. So, i had to write work-arounds at the 
        computer.hdl level... which has been corrected, handled at CPU level, and the code in Computer 
        has been returned to normal.

Project6

    Very BAD. Had to choose any programming language and wrtie a program to convert assembly language code to binary language.
    
    - I didn't catch syntax errors, semantic errors etc.
    - If the computation is D, then, whatever value you send, A or M, it will be set to 0 through zy control bit.
      But the CPUEmulator is very picky about choosing M, in that case... When i wrote assembler to pick A by default,
      my code BROKE !!!! Took whole evening to debug and realize that. Could'nt figure out why... the emulator was also
      not very informative. I just guessed and changed the control bits to exactly what was shown in the course and
      everything started working perfectly.
    - One Pong game is equivalent to 28,000 lines of machine language code !!!
    - Assembled my previous code from project4 as well using this assembler code. They are named as 
      Name_my_assembler_from_project6.hack

****************************** Nand2Tetris Part1 Review *********************************

Pluses are :-
    - Great Projects !!
    - Like the saying "Simplicity is beauty", both the authors' presentations were very simple
    - I thoroughly enjoyed the course.

Minuses are :-

    - Justification for the behaviour of Half-Adders & Full-Adders was not covered.
    - Magic of ALU control bits was not explicitly explained.
    - In project6, since Assembler was not written in Binary language, the hardship of making a real assembler in machine language was not felt leaving the project a little unsatisfactory.

Final Verdict :-
    - Thank you so much for making this course.
    - You guys have written, an Assembler, Hardware-emualtor, Cpu-emulator etc.
    - And the graphics that comes with "Program & Data Flow" option is simply icing on the cake.
    - And to top this, this entire course can be audited free of cost.
    - This is a thankless service you guys have regardlessly rendered.
    - Great Respect & Massive Gratitude i have for you guys.
    - Thank you so much. Much appreciated.

****************************** End of Nand2Tetris Part1 *********************************
****************************** Start of Nand2Tetris Part2 *********************************

GOAL
    To build a high-level software language like Java. So, goal is to build Jack.
    So, Jack to Binary.

    But the problem is, in our Hack computer, we have used certain conventions.
    For example, for addition, we use a 16 bit number, whose c5th bit should be 1.
    This need not have been the case in some other hardware design.
    So, most likely, each hardware producer would have tried to pack different 
    intructions inside the same 16-bits.. WHY.. Some hardwares are not even 16-bits.
    They are 32 bits. They can do more functions than what our hardware can represent 
    & perform.

    As a result, compiling our Jack language, is divided into 2 processes.
    And this is where virtualization comes into picture.

Virtualization

    As a compiler, we compile our Jack language only to this imaginary VM that we have designed.
    This VM is a design that provisions all of its workload in the form of a stack operation.

    There is a stack, to which data can be pushed or popped.
    For simplicity, there is only ONE entryway through which data can enter or exit.
    To avoid complexity.
    Entering the stack is known as push. Exiting the stack is known as pop.
    And 9 different operations are possible on the data existing in the stack.

    9 Arithmetic Operations

        Add, Sub,  EQ,  GT, LT,  AND,  OR,  NOT, Neg
        x+y  x-y  x==y  x>y x<y  x&y   x|y  !y   -y

        where, following is the order in which x and y reside on the stack 
        TOP
         y 
         x 
        END 
    
    On top of this, there is a virtualization on the underlying hardware memory segment as well.
    In the imaginary VM that we are compiling for, there are 8 different memory segments not one.

    8 Memory segments

        LOCAL (LCL), ARGUMENT (ARG), THIS, THAT, STATIC, TEMP, POINTER, CONSTANT

        - All the variables local to a function (that's currently being executed) are provisioned from and
        maintained inside LOCAL memory segment.
        - All the arguments passed to a function (being currently executed) are stored in the ARGUMENT 
        memory segment.
        - Functions that are invoked on an object, will need access to that object's contents.
        So, the object is copied to the THIS memory segment.
        - Arrays that are currently being used, are copied to the THAT segment.
        - POINTER is a pointer to a pointer. POINTER 0 refers to the memory location of THIS, which is a pointer 
        (Copying is a waste of time, So, THIS & THAT are pointers in the actual implementation, not seperate memory
         segments of their own, to which objects & arrays are copied to. Instead, THIS & THAT in practise are 
         pointers to the memory location of the actual memory segment)
        In that sense, POINTER 1 is a way of referring to to memory location of THAT. (A pointer to a pointer)
        - All the STATIC variables created in a program resides in this segment.
        - All TEMP variables used by the compiler for it's own processing resides in this segment.
        - CONSTANT, is a memory segment holding the world's constants stored in it.

Implementation of the Virtualization

    Since behind the virtualization, there is only one memory segment in our Hack computer. 
    All of these different concepts reside in it, in a very cramped way. 

    POINTER, THIS, THAT are simply pointers in implementation. So, they are merely 3 registers holding the 
    values of memory locations of the main memory.

    LOCAL, ARGUMENT, STATIC, TEMP are also simply pointers. Since there is no dedicated memory segments for 
    any of these.

    A random location in the memory is chosen for each of these virtual memory segments & the chosen memory 
    location is stored in a register which acts like a pointer.

    So, all virutal memory segments are simply pointers to various locations in the single memory segment.
    
    CONSTANTS - 
        There is no need for dedicating a whole memory unit to simply store constants & nothing else.
    In Hack computer, constants can be directly referenced. So, memory reservation to access them
    is not required. So, in reality, CONSTANT memory segment does not exist. Instead, the word CONSTANT 
    is simply a syntax for the translator to know what follows is direct data.

    This is the DOC for the virtual memory segments.
    Pointer     RAM address         Comments
    SP              0               This is the stack register, Pointer to location of stack in memory
    LCL             1               Pointer holding location of Local segment
    ARG             2               Pointer holding location of Argument segment
    THIS            3               Pointer holding location of current THIS object
    THAT            4               Pointer holding location of current array
    POINTER 0       3               Pointer to THIS pointer's memory location
    POINTER 1       4               Pointer to THAT pointer's memory location
    TEMP            5               This is not a pointer. This is the actual place of TEMP segment in memory
    STATIC          16              Not a pointer. Actual place where STATIC segment starts in memory

    RAM[5-12] are dedicated for TEMP variables used by compiler
    RAM[13-15] are dedicated for TEMP variables used by translator
    RAM[256] is the starting place of STACK stored in SP register.

Usage

    push local 12 
    -> LCL pointer holds the address where LCL memory segments starts.
    -> Read LCL register's value. Add 12 to it. Since we are trying to access 12th variable in local memory segment
    -> Access the value you get at the address you compute at the above step.
    -> Push it to stack.

    Similarly, for argument, this, that, temp & static.

    pop this 6
    -> Fetch THIS pointer's value. This is the memory address, where the object actually resides.
    -> Move 6 more places from there (maybe they are tryin to access one specific member of that object)
    -> Set value in that location to the value popped from stack.

Translator

    At first, i thought i will be a efficient programmer, and instead of showing efficiency in the running time 
    of the program, i tried to be efficient in the number of lines that a code has.
    This proved to be a disaster for me.
    There are many assembly statements common between the various VM statements.
    I tried to write the common code only once and ended up complicating the code, with a lot of if and else.

    In the end, because of the if & else, the code turned unreadable & the code length was also not short making
    it very difficult for me to debug the whole thing. In the end, i got only 80 points out of 100 since i was not 
    able to debug this beast.

    I chose to write the translator again.

    Which is why you have, one VMTranslator_minified.py & one VMTranslator.py


----------------------------------------------------------------------------------------------------------------------- 

I have respct for him now. Really remarkable !!! The way he has disected a beast, using abstractions & virtualizations
and teaching us these things, making us do these things. Hats off Sir, really has taken the pain to teach us !!
-----------------------------------------------------------------------------------------------------------------------


NOT-OBVIOUS from the COURSE

1. Half-Adder & Full-Adder arithmeticfs.. why 1 + 1 = 10 and 1 + 1 + 1 = 11
2. 2's Complement GENIUS
3. ALU, the control bits can be understood only if you realize NOT = 15 - x... This Madhu helped me realize it.
   Although.. i have seen it in the course, already myself.
4. Coding - How non-linear HDL is. How to get multiple outputs from the gates. Each from different time T. 
   Ex - Bit Register & CPU.

MOST IMPORTANT THING TO UDERSTAND ABOUT HDL 
1. They are NOT sequential.
2. You can take the program, and jumble the code. The output will still be the same.
3. It's a hardware specifying language. And in hardware, things work parallelly.
4. So, it is very difficult to sequentially decribe a system that's working parallelly.
5. So, the language is made in sucha way that... all the code will be read before making sense of it.
6. So, variables declared below a line, can be used in the line without any problem.
7. There is no IF-ELSE in hardware. Current always goes to all places. For example, the ALU runs even when a A-instruction is passed. Another example is, input goes to every single register in the RAM, even if only 
one register has to be updated. 

ONLY RESTRICTIONS IN HDL
1. Only with the in & out buses, you can use sub-buses.
2. You cant use the same intermeditate pin in 2 circuits
3. You can't do a = b, you need to do a = b * 1. For that you need to use a OR circuit & set something some value.
4. You cant declare constants in your code. There are only two constants you can do with true & false.
5. If you use out multiple times on a sequential circuit, you will get outT and outT+1 from the circuit.



        


    



